# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Notification {
  _id: String!
  kind: String!

  """Flag indicating if this notification is new and/or unseen."""
  unseen: Boolean!

  """The moment this notification was sent."""
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Coordinates {
  latitude: Float!
  longitude: Float!
}

type Address {
  street: String!
  number: Float!
  complement: String
  district: String
  zipCode: String
  city: String!
  state: String!
  coordinates: Coordinates
}

type PaymentMethod {
  _id: String!

  """Card id provided by the payment gateway."""
  cardId: String!

  """Last 4 digits of the credit card."""
  lastDigits: String!

  """The card's flag."""
  flag: String!
}

type Bank {
  _id: String!
  name: String!
}

type BankInfo {
  """The user banking institution."""
  bank: Bank!

  """User's bank agency."""
  agency: String!

  """The agency verifying digit."""
  agencyDv: String

  """User's bank account number."""
  account: String!

  """The bank account verifying digit."""
  accountDv: String

  """The user's bank account type."""
  accountType: ACCOUNT_TYPES!

  """The name of the account holder."""
  holderName: String!

  """The document number of the account holder."""
  holderDocument: String!
}

"""Bank account types."""
enum ACCOUNT_TYPES {
  CURRENT
  SAVINGS
  JOINT_CURRENT
  JOINT_SAVINGS
}

type Comment {
  _id: String!
  body: String!

  """The users tagged on this comment"""
  tags: [User!]!

  """The post that the comment belongs to"""
  post: Post!

  """The user who made the comment"""
  user: User!
  createdAt: DateTime!
}

type Category {
  _id: String!
  name: String!
  parent: Category

  """
  Every parent of this category, from its direct parent to the category root.
  """
  ancestrals: [Category!]!
  children: [Category!]!
}

type Post {
  _id: String!
  user: User!
  title: String!
  size: String!
  description: String

  """An array of urls for post images."""
  images: [String!]!

  """The category of this post."""
  category: Category!

  """Price of the item being announced in cents."""
  price: Float!

  """The condition of the post's product"""
  condition: POST_CONDITIONS!
  comments: [Comment!]!

  """A boolean indicating whether this post was sold or not."""
  sold: Boolean!

  """
  A boolean indicating whether this post is saved by the current user or not. If the request is not authenticated, this returns false.
  """
  saved: Boolean!

  """The amount of likes this post had."""
  likes: Float!
  createdAt: DateTime!
}

"""Possible post's product conditions."""
enum POST_CONDITIONS {
  NEW
  USED_NEW
  USED_GOOD
  USED_FAIR
}

type User {
  _id: String!
  name: String
  email: String
  cpf: String
  phoneNumber: String
  bankInfo: BankInfo
  posts: [Post!]!
  savedPosts: [Post!]!
  username: String!
  avatar: String
  address: Address

  """The ids of users credit cards"""
  paymentMethods: [PaymentMethod!]!
  createdAt: DateTime!
}

type PageInfo {
  """The first cursor of this page."""
  startCursor: String

  """The last cursor of this page."""
  endCursor: String

  """A boolean indicating if there are more edges after this page."""
  hasNextPage: Boolean!
}

type Order {
  _id: String!
  number: Int!
  buyer: User!
  paymentMethod: String!
  address: Address!

  """The posts of this order."""
  posts: [Post!]!

  """The total price of this order in cents."""
  total: Float!
  createdAt: DateTime!
}

type FeedPostEdge {
  node: Post!

  """An opaque cursor representing this edge position."""
  cursor: String!
}

type FeedPostConnection {
  """An array of post edges containing the node (Post) and its cursor."""
  edges: [FeedPostEdge!]!
  pageInfo: PageInfo!
}

type AuthResponse {
  """The token's owner user."""
  me: User!

  """
  A short lived access token, used to authenticate and grant access to the subject.
  """
  token: String!

  """A long lived token, used to get a new access token."""
  refreshToken: String!
}

type CommentTagNotification implements Notification {
  _id: String!
  kind: String!

  """Flag indicating if this notification is new and/or unseen."""
  unseen: Boolean!

  """The moment this notification was sent."""
  createdAt: DateTime!

  """The comment that the user was tagged on."""
  comment: Comment!
}

type SaleNotification implements Notification {
  _id: String!
  kind: String!

  """Flag indicating if this notification is new and/or unseen."""
  unseen: Boolean!

  """The moment this notification was sent."""
  createdAt: DateTime!

  """The order of the sales."""
  order: Order!
}

type Query {
  me: User!
  user(id: String!): User!

  """A list of 60 users"""
  users(searchTerm: String): [User!]!

  """Returns all categories"""
  categories(roots: Boolean): [Category!]!
  order(orderId: String!): Order!

  """The orders that the current user has bought."""
  myOrders: [Order!]!

  """Orders that the current user has sold."""
  mySales: [Order!]!
  post(postId: String!): Post!
  posts(
    """Filter posts by user id"""
    user: String!
  ): [Post!]!
  banks: [Bank!]!
  feed(
    """The first N elements to return after the cursor."""
    first: Float!

    """Only return edges after this cursor."""
    after: String
  ): FeedPostConnection!
  notifications: [Notification!]!
}

type Mutation {
  savePost(postId: String!): User!
  unsavePost(postId: String!): User!
  updateUserInfo(input: UpdateUserInfoInput!): User!
  updateAddress(address: AddressInput!): User!

  """Returns a pre-signed S3 URL that allows the avatar upload."""
  uploadAvatarUrl: String!

  """Returns the user with the updated avatar url."""
  updateUserAvatar(newAvatarUrl: String!): User!
  addCreditCard(input: AddCreditCardInput!): User!
  deletePaymentMethod(paymentMethodId: String!): User!
  addDeviceToken(deviceToken: String!): User!
  removeDeviceToken: User!
  addComment(input: AddCommentInput!): Comment!
  checkout(input: CheckoutInput!): Order!
  likePost(postId: String!): Post!
  unlikePost(postId: String!): Post!

  """Returns a pre-signed S3 URL that allows the avatar upload."""
  uploadPostImage: String!
  addPost(addPostInput: AddPostInput!): Post!
  editPost(updateFields: UpdatePostFields!, postId: String!): Post!
  deletePost(postId: String!): Post!
  signUp(input: SignUpInput!): AuthResponse!
  logIn(password: String!, username: String!): AuthResponse!
  refreshToken(token: String!): String!

  """Mark all user notifications as seen."""
  clearNotifications: [Notification!]!
}

input UpdateUserInfoInput {
  name: String
  email: String
  cpf: String
  phoneNumber: String

  """The user's banking info."""
  bankInfo: BankInfoInput
}

input BankInfoInput {
  """The bank number."""
  bank: String!

  """User's bank agency."""
  agency: String!

  """The agency verifying digit."""
  agencyDv: String

  """User's bank account number."""
  account: String!

  """The bank account verifying digit."""
  accountDv: String

  """The user's bank account type"""
  accountType: ACCOUNT_TYPES!

  """The name of the account holder."""
  holderName: String!

  """The document number of the account holder."""
  holderDocument: String!
}

input AddressInput {
  street: String
  number: Float
  complement: String
  district: String
  zipCode: String
  city: String
  state: String
  coordinates: CoordinatesInput
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

input AddCreditCardInput {
  """Card id provided by the payment gateway."""
  cardId: String!

  """Last 4 digits of the credit card."""
  lastDigits: String!

  """The card's flag."""
  flag: String!
}

input AddCommentInput {
  """The id of the post the comment is being made."""
  post: String!
  body: String!
}

input CheckoutInput {
  """The array of posts being bought."""
  posts: [String!]!

  """The id of the user's payment method to use on the checkout."""
  paymentMethodId: String!
}

input AddPostInput {
  title: String!
  size: String!
  description: String!

  """An array of urls for post images."""
  images: [String!]!

  """The id of the post category."""
  category: String!

  """The condition of this post's product."""
  condition: POST_CONDITIONS!

  """Price of the item being announced in cents."""
  price: Int!
}

input UpdatePostFields {
  title: String
  description: String

  """The new price of the item in cents."""
  price: Int
  size: String

  """An array of urls for the new post images."""
  images: [String!]

  """The new category id of this post."""
  category: String

  """The new condition of the post's product"""
  condition: POST_CONDITIONS
}

input SignUpInput {
  username: String!
  password: String!
  avatarUrl: String
}

type Subscription {
  notification: Notification!
}
