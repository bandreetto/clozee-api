# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  street: String!
  number: Float!
  district: String
  zipCode: String
  city: String!
  country: String!
}

type Comment {
  _id: String!
  body: String!

  """The users tagged on this comment"""
  tags: [User!]!

  """The post that the comment belongs to"""
  post: Post!

  """The user who made the comment"""
  user: User!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Post {
  _id: String!
  user: User!
  title: String!
  size: String!
  description: String

  """An array of urls for post images"""
  images: [String!]!

  """An array of strings representing the post categories"""
  categories: [String!]!
  comments: [Comment!]!

  """Price of the item being announced in cents"""
  price: Float!
  createdAt: DateTime!
}

type User {
  _id: String!
  name: String
  posts: [Post!]!
  username: String!
  avatar: String
  address: Address
  createdAt: DateTime!
}

type PageInfo {
  """The first cursor of this page."""
  startCursor: String!

  """The last cursor of this page."""
  endCursor: String!

  """A boolean indicating if there are more edges after this page."""
  hasNextPage: Boolean!
}

type FeedPostEdge {
  node: Post!

  """An opaque cursor representing this edge position."""
  cursor: String!
}

type FeedPostConnection {
  """An array of post edges containing the node (Post) and its cursor."""
  edges: [FeedPostEdge!]!
  pageInfo: PageInfo!
}

type LogInResponse {
  """
  A short lived access token, used to authenticate and grant access to the subject.
  """
  token: String!

  """A long lived token, used to get a new access token."""
  refreshToken: String!
}

type SignUpResponse {
  """
  A short lived access token, used to authenticate and grant access to the subject.
  """
  token: String!

  """A long lived token, used to get a new access token."""
  refreshToken: String!

  """The created user."""
  user: User!
}

type Query {
  user(id: String!): User!

  """A list of 60 users"""
  users(searchTerm: String): [User!]!
  post(postId: String!): Post!
  posts(
    """Filter posts by user id"""
    user: String!
  ): [Post!]!
  feed(
    """The first N elements to return after the cursor."""
    first: Float!

    """Only return edges after this cursor."""
    after: String
  ): FeedPostConnection!
}

type Mutation {
  updateAddress(input: UpdateAddressInput!): User!
  addComment(input: AddCommentInput!): Comment!
  addPost(addPostInput: AddPostInput!): Post!
  signUp(input: SignUpInput!): SignUpResponse!
  logIn(password: String!, username: String!): LogInResponse!
  refreshToken(token: String!): String!
}

input UpdateAddressInput {
  userId: String!
  newAddress: AddressInput!
}

input AddressInput {
  street: String
  number: Float
  district: String
  zipCode: String
  city: String
  country: String
}

input AddCommentInput {
  """The id of the post the comment is being made."""
  post: String!
  body: String!

  """The user who made the comment"""
  user: String!
}

input AddPostInput {
  """The id of the post's user"""
  user: String!
  title: String!
  size: String!
  description: String!

  """An array of urls for post images"""
  images: [String!]!

  """An array of strings representing the post categories"""
  categories: [String!] = []

  """Price of the item being announced in cents"""
  price: Float!
}

input SignUpInput {
  username: String!
  password: String!
  avatarUrl: String
}
